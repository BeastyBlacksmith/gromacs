
.simple-build-template:
  # Docker images are from dockerhub, user eriklindahl
  stage: pre-build
  image: biophysics/gcc-gromacs
  variables:
    KUBERNETES_CPU_LIMIT: 8
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_MEMORY_LIMIT: 8Gi
    CMAKE_COMPILER_SCRIPT: ""
    CMAKE_EXTRA_OPTIONS: ""
    CMAKE_SIMD_OPTIONS: "-DGMX_SIMD=None"
    CMAKE_MPI_OPTIONS: "-DGMX_THREAD_MPI=ON"
    CMAKE_PRECISION_OPTIONS: "-DGMX_DOUBLE=OFF"
    CMAKE_BUILD_TYPE_OPTIONS: "-DCMAKE_BUILD_TYPE=Debug"
    CMAKE_GPU_OPTIONS: "-DGMX_GPU=OFF"
    CMAKE_GMXAPI_OPTIONS: "-DGMX_PYTHON_PACKAGE=OFF"

  script:
    - echo $CMAKE_COMPILER_SCRIPT
    - echo $CMAKE_EXTRA_OPTIONS
    - echo $CMAKE_SIMD_OPTIONS
    - echo $CMAKE_GPU_OPTIONS
    - echo $CMAKE_MPI_OPTIONS
    - echo $CMAKE_PRECISION_OPTIONS
    - echo $CMAKE_BUILD_TYPE_OPTIONS
    - echo $CMAKE_GMXAPI_OPTIONS
    - if [[ -d $BUILD_DIR ]] ; then
      echo "Cleaning up build directory" ;
      rm -rf $BUILD_DIR && mkdir $BUILD_DIR ;
      else
      echo "Preparing new build directory" ;
      mkdir $BUILD_DIR ;
      fi
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      $CMAKE_COMPILER_SCRIPT
      $CMAKE_EXTRA_OPTIONS
      $CMAKE_SIMD_OPTIONS
      $CMAKE_MPI_OPTIONS
      $CMAKE_PRECISION_OPTIONS
      $CMAKE_BUILD_TYPE_OPTIONS
      $CMAKE_GPU_OPTIONS
      $CMAKE_GMXAPI_OPTIONS
      -DCMAKE_INSTALL_PREFIX=../$INSTALL_DIR -DGMX_COMPILER_WARNINGS=ON
      2>&1 | tee cmakeLog.log
    - awk '/CMake Warning/,/^--|^$/' cmakeLog.log | tee cmakeErrors.log
    - if [ -s cmakeErrors.log  ] ; then echo "Found CMake warning while processing build"; cat cmakeErrors.log ; exit 1; fi
    - cmake --build . -- -j8 2>&1 | tee buildLogFile.log
    - cmake --build . --target tests -- -j8 2>&1 | tee testBuildLogFile.log
    - awk '/warning/,/warning.*generated|^$/' buildLogFile.log testBuildLogFile.log
      | grep -v "CMake" | tee buildErrors.log || true
    - grep "cannot be built" buildLogFile.log testBuildLogFile.log | tee -a buildErrors.log || true
    - cmake --build . --target install 2>&1 | tee installBuildLogFile.log
    - if [ -s buildErrors.log ] ; then echo "Found compiler warning during build"; cat buildErrors.log; exit 1; fi
    - ctest -D ExperimentalTest --output-on-failure | tee ctestLog.log || true
    - awk '/The following tests FAILED/,/^Errors while running CTest|^$/'
      ctestLog.log | tee ctestErrors.log
    - xsltproc scripts/CTest2JUnit.xsl Testing/`head -n 1 < Testing/TAG`/Test.xml > JUnitTestResults.xml
    - if [ -s ctestErrors.log ] ; then
      echo "Error during running ctest";
      exit 1;
      fi
    - cd ..
  artifacts:
    reports:
      junit: $BUILD_DIR/JUnitTestResults.xml
    paths:
      - $BUILD_DIR/*log
    when: always
    expire_in: 1 week

# Initial build that always needs to pass before follow-up stages run
simple-build:
  extends:
    - .simple-build-template
    - .use-ccache
    - .variables:default
    - .use-gcc7
  variables:
    BUILD_DIR: simple-build
  except:
    variables:
      - $GROMACS_RELEASE

# Jobs running in first pre-build stage
.configure-build-template:
  # Docker image uploaded to dockerhub by user eriklindahl
  # TODO: Get DockerFile for admin/dockerfiles
  stage: configure-build
  image: biophysics/gcc-gromacs
  variables:
    KUBERNETES_CPU_LIMIT: 1
    KUBERNETES_CPU_REQUEST: 1
    KUBERNETES_MEMORY_LIMIT: 2Gi
    CMAKE_COMPILER_SCRIPT: ""
    CMAKE_EXTRA_OPTIONS: ""
    CMAKE_SIMD_OPTIONS: "-DGMX_SIMD=AUTO"
    CMAKE_MPI_OPTIONS: "-DGMX_THREAD_MPI=ON"
    CMAKE_PRECISION_OPTIONS: "-DGMX_DOUBLE=OFF"
    CMAKE_BUILD_TYPE_OPTIONS: "-DCMAKE_BUILD_TYPE=Debug"
    CMAKE_GPU_OPTIONS: "-DGMX_GPU=OFF"
    CMAKE_GMXAPI_OPTIONS: "-DGMX_PYTHON_PACKAGE=OFF"

  script:
    - echo $CMAKE_COMPILER_SCRIPT
    - echo $CMAKE_EXTRA_OPTIONS
    - echo $CMAKE_SIMD_OPTIONS
    - echo $CMAKE_GPU_OPTIONS
    - echo $CMAKE_MPI_OPTIONS
    - echo $CMAKE_PRECISION_OPTIONS
    - echo $CMAKE_BUILD_TYPE_OPTIONS
    - echo $CMAKE_GMXAPI_OPTIONS
    - if [[ -d $BUILD_DIR ]] ; then
      rm -rf $BUILD_DIR && mkdir $BUILD_DIR ;
      else
      echo "Preparing new build directory" ;
      mkdir $BUILD_DIR ;
      fi
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      $CMAKE_COMPILER_SCRIPT
      $CMAKE_EXTRA_OPTIONS
      $CMAKE_SIMD_OPTIONS
      $CMAKE_MPI_OPTIONS
      $CMAKE_PRECISION_OPTIONS
      $CMAKE_BUILD_TYPE_OPTIONS
      $CMAKE_GPU_OPTIONS
      $CMAKE_GMXAPI_OPTIONS
      -DCMAKE_INSTALL_PREFIX=../$INSTALL_DIR -DGMX_COMPILER_WARNINGS=ON
      2>&1 | tee cmakeLog.log
    - awk '/CMake Warning/,/^--|^$/' cmakeLog.log | tee cmakeErrors.log
    - if [ -s cmakeErrors.log  ] ; then echo "Found CMake warning while processing build"; cat cmakeErrors.log ; exit 1; fi
    - cd ..
  artifacts:
    when: always
    paths:
      - $BUILD_DIR

.configure-build-release-template:
  # Dockerfiles are from dockerhub, user eriklindahl
  # image in admin/dockerimages/ci-docs-py27
  stage: release-configure
  image: biophysics/gcc-gromacs
  variables:
    KUBERNETES_CPU_LIMIT: 1
    KUBERNETES_CPU_REQUEST: 1
    KUBERNETES_MEMORY_LIMIT: 2Gi
    CMAKE_COMPILER_SCRIPT: ""
    CMAKE_EXTRA_OPTIONS: ""
    CMAKE_SIMD_OPTIONS: "-DGMX_SIMD=AUTO"
    CMAKE_MPI_OPTIONS: "-DGMX_THREAD_MPI=ON"
    CMAKE_PRECISION_OPTIONS: "-DGMX_DOUBLE=OFF"
    CMAKE_BUILD_TYPE_OPTIONS: "-DCMAKE_BUILD_TYPE=RelWithAssert"
    CMAKE_GPU_OPTIONS: "-DGMX_GPU=OFF"
    CMAKE_GMXAPI_OPTIONS: "-DGMX_PYTHON_PACKAGE=OFF"
    RELEASE_BUILD_DIR: release-builds
    RELEASE_SOURCE: release-source-from-tarball
    RELEASE_REGRESSIONTESTS: release-regressiontests-from-tarball

  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE
  script:
    - VERSION=`cat version.json |
      python3 -c "import json,sys; print(json.load(sys.stdin)['version'])"`
    - if [[ $GROMACS_RELEASE != "true" ]] ; then
      VERSION=$VERSION-dev ;
      fi
    - SOURCENAME=gromacs-$VERSION
    - SOURCETARBALL=$SOURCENAME.tar.gz
    - REGTESTNAME=regressiontests-$VERSION
    - REGTESTTARBALL=$REGTESTNAME.tar.gz
    - echo "$SOURCETARBALL"
    - echo "$REGTESTTARBALL"
    - RELEASE_TARBALLS=release-tarballs
    - rm -rf $RELEASE_TARBALLS $RELEASE_SOURCE $RELEASE_REGRESSIONTESTS && mkdir $RELEASE_TARBALLS
    - mv $SOURCETARBALL $RELEASE_TARBALLS
    - mv $REGTESTTARBALL $RELEASE_TARBALLS
    - cd $RELEASE_TARBALLS
    # We rename the source and regressiontest directories
    # to have names for them that don't change for different versions.
    - tar -xf $SOURCETARBALL
    - mv $SOURCENAME ../$RELEASE_SOURCE
    - tar -xf $REGTESTTARBALL
    - mv $REGTESTNAME ../$RELEASE_REGRESSIONTESTS
    - rm $SOURCETARBALL $REGTESTTARBALL
    - cd ..
    - echo $CMAKE_COMPILER_SCRIPT
    - echo $CMAKE_EXTRA_OPTIONS
    - echo $CMAKE_SIMD_OPTIONS
    - echo $CMAKE_GPU_OPTIONS
    - echo $CMAKE_MPI_OPTIONS
    - echo $CMAKE_PRECISION_OPTIONS
    - echo $CMAKE_BUILD_TYPE_OPTIONS
    - echo $CMAKE_GMXAPI_OPTIONS
    - if [[ -d $RELEASE_BUILD_DIR ]] ; then
      echo "Cleaning up build directory" ;
      rm -rf $RELEASE_BUILD_DIR && mkdir $RELEASE_BUILD_DIR ;
      else
      echo "Preparing new build directory" ;
      mkdir $RELEASE_BUILD_DIR ;
      fi
    - cd $RELEASE_BUILD_DIR
    - cmake ../$RELEASE_SOURCE/
      -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      $CMAKE_COMPILER_SCRIPT
      $CMAKE_EXTRA_OPTIONS
      $CMAKE_SIMD_OPTIONS
      $CMAKE_MPI_OPTIONS
      $CMAKE_PRECISION_OPTIONS
      $CMAKE_BUILD_TYPE_OPTIONS
      $CMAKE_GPU_OPTIONS
      $CMAKE_GMXAPI_OPTIONS
      "-DREGRESSIONTEST_PATH=../$RELEASE_REGRESSIONTESTS"
      -DCMAKE_INSTALL_PREFIX=../$INSTALL_DIR -DGMX_COMPILER_WARNINGS=ON
      2>&1 | tee cmakeLog.log
    - awk '/CMake Warning/,/^--|^$/' cmakeLog.log | tee cmakeErrors.log
    - if [ -s cmakeErrors.log  ] ; then echo "Found CMake warning while processing build"; cat cmakeErrors.log ; exit 1; fi
    - cd ..
  artifacts:
    when: always
    paths:
      - $RELEASE_BUILD_DIR
      - $RELEASE_REGRESSIONTESTS
      - $RELEASE_SOURCE

.configure-extends-template:
  extends:
    - .configure-build-template
    - .variables:default
  cache: {}

.configure-release-extends-template:
  extends:
    - .configure-build-release-template
    - .variables:default
  cache: {}

# Templates for configuration stage
.configure-gcc:
  extends:
    - .configure-extends-template

.configure-gcc-release:
  extends:
    - .configure-release-extends-template

.configure-gcc-cuda:
  extends:
    - .configure-gcc
    - .cuda-template

configure-gcc-7:
  extends:
    - .configure-gcc
    - .use-gcc7
  needs:
    - job: simple-build
      artifacts: false
  except:
    variables:
      - $GROMACS_RELEASE

configure-gcc-7-release:
  extends:
    - .configure-gcc-release
    - .use-gcc7
  cache: {}
  variables:
    RELEASE_BUILD_DIR: release-builds-gcc
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE
  dependencies:
    - package-archive-release
    - package-regressiontests-release
    - prepare-release-version

configure-gcc-7-simd-sse41:
  extends:
    - .configure-gcc
    - .use-gcc7
  needs:
    - job: simple-build
      artifacts: false
  variables:
    CMAKE_SIMD_OPTIONS: "-DGMX_SIMD=SSE4.1"
  except:
    variables:
      - $GROMACS_RELEASE

configure-gcc-7-double:
  extends:
    - .configure-gcc
    - .use-gcc7
  needs:
    - job: simple-build
      artifacts: false
  variables:
    CMAKE_PRECISION_OPTIONS: -DGMX_DOUBLE=ON
  except:
    variables:
      - $GROMACS_RELEASE

configure-gcc-7-double-release:
  extends:
    - .configure-gcc-release
    - .use-gcc7
  cache: {}
  variables:
    CMAKE_PRECISION_OPTIONS: -DGMX_DOUBLE=ON
    RELEASE_BUILD_DIR: release-builds-gcc
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE
  dependencies:
    - package-archive-release
    - package-regressiontests-release
    - prepare-release-version

configure-gcc-7-gmxapi:
  extends:
    - .configure-gcc
    - .configure-gmxapi-template
    - .use-gcc7
  needs:
    - job: simple-build
      artifacts: false
  except:
    variables:
      - $GROMACS_RELEASE

configure-gcc-7-gmxapi-release:
  extends:
    - .configure-gcc-release
    - .configure-gmxapi-template
    - .use-gcc7
  cache: {}
  variables:
    RELEASE_BUILD_DIR: release-builds-gcc
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE
  dependencies:
    - package-archive-release
    - package-regressiontests-release
    - prepare-release-version

configure-gcc-8:
  extends:
    - .configure-gcc
    - .use-gcc8
  needs:
    - job: simple-build
      artifacts: false
  except:
    variables:
      - $GROMACS_RELEASE

configure-gcc-8-release:
  extends:
    - .configure-gcc-release
    - .use-gcc8
  cache: {}
  variables:
    RELEASE_BUILD_DIR: release-builds-gcc
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE
  dependencies:
    - package-archive-release
    - package-regressiontests-release
    - prepare-release-version

configure-gcc-8-cuda-10.2:
  extends:
    - .configure-gcc-cuda
    - .use-gcc8:cuda-10.2
  needs:
    - job: simple-build
      artifacts: false
  except:
    variables:
      - $GROMACS_RELEASE

.configure-clang:
  extends:
    - .configure-extends-template
    - .clang-before-script-template
    - .build-clang-template

.configure-clang-release:
  extends:
    - .configure-release-extends-template
    - .clang-before-script-template
    - .build-clang-template

# For version of clang before 7, we need to always provide the full version
# Use something like this instead in the download script:
# APT_COMPILER_VERSION=$(($COMPILER_MAJOR_VERSION < 7 ? "${COMPILER_MAJOR_VERSION}.0" : $COMPILER_MAJOR_VERSION))
configure-clang-6:
  extends:
    - .configure-clang
    - .clang6-template
  needs:
    - job: simple-build
      artifacts: false
  variables:
    COMPILER_MAJOR_VERSION: "6.0"
    CMAKE_MPI_OPTIONS: -DGMX_OPENMP=OFF
  except:
    variables:
      - $GROMACS_RELEASE

configure-clang-7:
  extends:
    - .configure-clang
    - .clang7-template
  needs:
    - job: simple-build
      artifacts: false
  variables:
    COMPILER_MAJOR_VERSION: 7
  except:
    variables:
      - $GROMACS_RELEASE

configure-clang-7-release:
  extends:
    - .configure-clang-release
    - .clang7-template
  cache: {}
  variables:
    COMPILER_MAJOR_VERSION: 7
    RELEASE_BUILD_DIR: release-builds-clang
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE
  dependencies:
    - package-archive-release
    - package-regressiontests-release
    - prepare-release-version

configure-clang-7-gmxapi:
  extends:
    - .configure-clang
    - .configure-gmxapi-template
    - .clang7-template
  needs:
    - job: simple-build
      artifacts: false
  variables:
    COMPILER_MAJOR_VERSION: 7
  except:
    variables:
      - $GROMACS_RELEASE

configure-clang-7-gmxapi-release:
  extends:
    - .configure-clang-release
    - .configure-gmxapi-template
    - .clang7-template
  cache: {}
  variables:
    COMPILER_MAJOR_VERSION: 7
    RELEASE_BUILD_DIR: release-builds-clang
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE
  dependencies:
    - package-archive-release
    - package-regressiontests-release
    - prepare-release-version

configure-clang-8:
  extends:
    - .configure-clang
    - .clang8-template
  needs:
    - job: simple-build
      artifacts: false
  variables:
    COMPILER_MAJOR_VERSION: 8
  except:
    variables:
      - $GROMACS_RELEASE

configure-clang-8-release:
  extends:
    - .configure-clang-release
    - .clang8-template
  cache: {}
  variables:
    COMPILER_MAJOR_VERSION: 8
    RELEASE_BUILD_DIR: release-builds-clang
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE
  dependencies:
    - package-archive-release
    - package-regressiontests-release
    - prepare-release-version

# Jobs running during build stage

.binary-build-template:
  # Dockerfiles are from dockerhub, user eriklindahl
  # image in admin/dockerimages/ci-docs-py27
  stage: build
  image: biophysics/gcc-gromacs
  variables:

  script:
    - cd $BUILD_DIR
    - cmake --build . -- -j8 2>&1 | tee buildLogFile.log
    - cmake --build . --target tests -- -j8 2>&1 | tee testBuildLogFile.log
    - awk '/warning/,/warning.*generated|^$/' buildLogFile.log testBuildLogFile.log
      | grep -v "CMake" | tee buildErrors.log || true
    - grep "cannot be built" buildLogFile.log testBuildLogFile.log | tee -a buildErrors.log || true
    - cmake --build . --target install 2>&1 | tee installBuildLogFile.log
    - if [ -s buildErrors.log ] ; then echo "Found compiler warning during build"; cat buildErrors.log; exit 1; fi
    - cd ..
  artifacts:
    when: always
    paths:
      - $BUILD_DIR
      - $INSTALL_DIR/

.build-extends-template:
  extends:
    - .binary-build-template
    - .use-ccache
    - .variables:default

.build-gcc:
  extends:
    - .build-extends-template

.build-gcc-cuda:
  extends:
    - .build-gcc
    - .cuda-template

build-gcc-7:
  extends:
    - .build-gcc
    - .use-gcc7
  needs:
    - job: simple-build
      artifacts: false
    - job: configure-gcc-7
      artifacts: true
  except:
    variables:
      - $GROMACS_RELEASE

build-gcc-7-release:
  extends:
    - .build-gcc
    - .use-gcc7
  stage: release-build
  variables:
    BUILD_DIR: release-builds-gcc
  needs:
    - job: configure-gcc-7-release
      artifacts: true
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE

build-gcc-7-simd-sse41:
  extends:
    - .build-gcc
    - .use-gcc7
  needs:
    - job: simple-build
      artifacts: false
    - job: configure-gcc-7-simd-sse41
      artifacts: true
  except:
    variables:
      - $GROMACS_RELEASE

build-gcc-7-double:
  extends:
    - .build-gcc
    - .use-gcc7
  needs:
    - job: simple-build
      artifacts: false
    - job: configure-gcc-7-double
      artifacts: true
  except:
    variables:
      - $GROMACS_RELEASE

build-gcc-7-gmxapi:
  extends:
    - .build-gcc
    - .gmxapi-extra-installs
    - .use-gcc7
  needs:
    - job: simple-build
      artifacts: false
    - job: configure-gcc-7-gmxapi
      artifacts: true
  except:
    variables:
      - $GROMACS_RELEASE

build-gcc-7-double-release:
  extends:
    - .build-gcc
    - .use-gcc7
  stage: release-build
  variables:
    BUILD_DIR: release-builds-gcc
  needs:
    - job: configure-gcc-7-double-release
      artifacts: true
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE

build-gcc-7-gmxapi-release:
  extends:
    - .build-gcc
    - .gmxapi-extra-installs
    - .use-gcc7
  stage: release-build
  variables:
    BUILD_DIR: release-builds-gcc
  needs:
    - job: configure-gcc-7-gmxapi-release
      artifacts: true
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE

build-gcc-8:
  extends:
    - .build-gcc
    - .use-gcc8
  needs:
    - job: simple-build
      artifacts: false
    - job: configure-gcc-8
      artifacts: true
  except:
    variables:
      - $GROMACS_RELEASE

build-gcc-8-release:
  extends:
    - .build-gcc
    - .use-gcc8
  stage: release-build
  variables:
    BUILD_DIR: release-builds-gcc
  needs:
    - job: configure-gcc-8-release
      artifacts: true
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE

build-gcc-8-cuda-10.2:
  extends:
    - .build-gcc-cuda
    - .use-gcc8:cuda-10.2
  needs:
    - job: simple-build
      artifacts: false
    - job: configure-gcc-8-cuda-10.2
      artifacts: true
  except:
    variables:
      - $GROMACS_RELEASE

.build-clang:
  extends:
    - .build-extends-template
    - .clang-before-script-template
    - .build-clang-template

build-clang-6:
  extends:
    - .build-clang
    - .clang6-template
  needs:
    - job: simple-build
      artifacts: false
    - job: configure-clang-6
      artifacts: true
  except:
    variables:
      - $GROMACS_RELEASE

build-clang-7:
  extends:
    - .build-clang
    - .clang7-template
  needs:
    - job: simple-build
      artifacts: false
    - job: configure-clang-7
      artifacts: true
  except:
    variables:
      - $GROMACS_RELEASE

build-clang-7-release:
  extends:
    - .build-clang
    - .clang7-template
  stage: release-build
  variables:
    BUILD_DIR: release-builds-clang
  needs:
    - job: configure-clang-7-release
      artifacts: true
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE

build-clang-7-gmxapi:
  extends:
    - .build-clang
    - .gmxapi-extra-installs
    - .clang7-template
  needs:
    - job: simple-build
      artifacts: false
    - job: configure-clang-7-gmxapi
      artifacts: true
  except:
    variables:
      - $GROMACS_RELEASE

build-clang-7-gmxapi-release:
  extends:
    - .build-clang
    - .gmxapi-extra-installs
    - .clang7-template
  stage: release-build
  variables:
    BUILD_DIR: release-builds-clang
  needs:
    - job: configure-clang-7-gmxapi-release
      artifacts: true
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE

build-clang-8:
  extends:
    - .build-clang
    - .clang8-template
  needs:
    - job: simple-build
      artifacts: false
    - job: configure-clang-8
      artifacts: true
  except:
    variables:
      - $GROMACS_RELEASE

build-clang-8-release:
  extends:
    - .build-clang
    - .clang8-template
  stage: release-build
  variables:
    BUILD_DIR: release-builds-clang
  needs:
    - job: configure-clang-8-release
      artifacts: true
  only:
    refs:
      - web
      - schedules
      - triggers
    variables:
      - $GROMACS_RELEASE


# Jobs running during test stage
.test-base-template:
  variables:
    BUILD_DIR: build
  # Docker image uploaded to dockerhub by user eriklindahl
  # TODO: Get DockerFile for admin/dockerfiles
  image: biophysics/gcc-gromacs
  stage: test
  retry:
    max: 2

.test-script-template:
  script:
    - cd $BUILD_DIR
    - ctest -D ExperimentalTest --output-on-failure | tee ctestLog.log || true
    - awk '/The following tests FAILED/,/^Errors while running CTest|^$/'
      ctestLog.log | tee ctestErrors.log
    - xsltproc scripts/CTest2JUnit.xsl Testing/`head -n 1 < Testing/TAG`/Test.xml > JUnitTestResults.xml
    - if [ -s ctestErrors.log ] ; then
      echo "Error during running ctest";
      exit 1;
      fi
    - cd ..
  artifacts:
    reports:
      junit: $BUILD_DIR/JUnitTestResults.xml
    paths:
      - $BUILD_DIR/Testing
      - $BUILD_DIR/tests
    when: always
    expire_in: 1 week

.test-extends-template:
  extends:
    - .test-base-template
    - .test-script-template
    - .variables:default

.test-gcc-template:
  variables:
    BUILD_DIR: build-gcc

.test-gcc:
  extends:
    - .test-extends-template
    - .test-gcc-template

.test-gcc-cuda:
  extends:
    - .test-gcc
    - .cuda-template

test-gcc-7:
  extends:
    - .test-gcc
    - .use-gcc7
  needs:
    - job: simple-build
      artifacts: false
    - job: build-gcc-7
  except:
    variables:
      - $GROMACS_RELEASE

test-gcc-7-release:
  extends:
    - .test-gcc
    - .use-gcc7
  stage: release-tests
  variables:
    BUILD_DIR: release-builds-gcc
  needs:
    - job: configure-gcc-7-release
      artifacts: true
    - job: build-gcc-7-release
      artifacts: true
  only:
    refs:
      - triggers
      - web
      - schedules
    variables:
      - $GROMACS_RELEASE

test-gcc-7-simd-sse41:
  extends:
    - .test-gcc
    - .use-gcc7
  needs:
    - job: simple-build
      artifacts: false
    - job: build-gcc-7-simd-sse41
  except:
    variables:
      - $GROMACS_RELEASE

test-gcc-7-double:
  extends:
    - .test-gcc
    - .use-gcc7
  needs:
    - job: simple-build
      artifacts: false
    - job: build-gcc-7-double
  except:
    variables:
      - $GROMACS_RELEASE

test-gcc-7-double-release:
  extends:
    - .test-gcc
    - .use-gcc7
  stage: release-tests
  variables:
    BUILD_DIR: release-builds-gcc
  needs:
    - job: configure-gcc-7-double-release
      artifacts: true
    - job: build-gcc-7-double-release
      artifacts: true
  only:
    refs:
      - triggers
      - web
      - schedules
    variables:
      - $GROMACS_RELEASE

test-gcc-7-gmxapi:
  extends:
    - .test-gcc
    - .gmxapi-extra-installs
    - .use-gcc7
  needs:
    - job: simple-build
      artifacts: false
    - job: build-gcc-7-gmxapi
  except:
    variables:
      - $GROMACS_RELEASE

test-gcc-7-gmxapi-release:
  extends:
    - .test-gcc
    - .gmxapi-extra-installs
    - .use-gcc7
  stage: release-tests
  variables:
    BUILD_DIR: release-builds-gcc
  needs:
    - job: configure-gcc-7-gmxapi-release
      artifacts: true
    - job: build-gcc-7-gmxapi-release
      artifacts: true
  only:
    refs:
      - triggers
      - web
      - schedules
    variables:
      - $GROMACS_RELEASE

test-gcc-8:
  extends:
    - .test-gcc
    - .use-gcc8
  needs:
    - job: simple-build
      artifacts: false
    - job: build-gcc-8
  except:
    variables:
      - $GROMACS_RELEASE

test-gcc-8-release:
  extends:
    - .test-gcc
    - .use-gcc8
  stage: release-tests
  variables:
    BUILD_DIR: release-builds-gcc
  needs:
    - job: configure-gcc-8-release
      artifacts: true
    - job: build-gcc-8-release
      artifacts: true
  only:
    refs:
      - triggers
      - web
      - schedules
    variables:
      - $GROMACS_RELEASE

test-gcc-8-cuda-10.2:
  variables:
    KUBERNETES_EXTENDED_RESOURCE_NAME: "nvidia.com/gpu"
    KUBERNETES_EXTENDED_RESOURCE_LIMIT: 1
  extends:
    - .test-gcc-cuda
    - .use-gcc8:cuda-10.2
  needs:
    - job: simple-build
      artifacts: false
    - job: build-gcc-8-cuda-10.2
  except:
    variables:
      - $GROMACS_RELEASE

.test-clang-template:
  variables:
    COMPILER_MAJOR_VERSION: 7
    BUILD_DIR: build-clang

.test-clang:
  extends:
    - .test-extends-template
    - .clang-before-script-template
    - .test-clang-template

test-clang-6:
  extends:
    - .test-clang
    - .clang6-template
  needs:
    - job: simple-build
      artifacts: false
    - job: build-clang-6
  except:
    variables:
      - $GROMACS_RELEASE

test-clang-7:
  extends:
    - .test-clang
    - .clang7-template
  needs:
    - job: simple-build
      artifacts: false
    - job: build-clang-7
  except:
    variables:
      - $GROMACS_RELEASE

test-clang-7-release:
  extends:
    - .test-clang
    - .clang7-template
  stage: release-tests
  variables:
    BUILD_DIR: release-builds-clang
  needs:
    - job: configure-clang-7-release
      artifacts: true
    - job: build-clang-7-release
      artifacts: true
  only:
    refs:
      - triggers
      - web
      - schedules
    variables:
      - $GROMACS_RELEASE

test-clang-7-gmxapi:
  extends:
    - .test-clang
    - .gmxapi-extra-installs
    - .clang7-template
  needs:
    - job: simple-build
      artifacts: false
    - job: build-clang-7-gmxapi
  except:
    variables:
      - $GROMACS_RELEASE

test-clang-7-gmxapi-release:
  extends:
    - .test-clang
    - .gmxapi-extra-installs
    - .clang7-template
  stage: release-tests
  variables:
    BUILD_DIR: release-builds-clang
  needs:
    - job: configure-clang-7-gmxapi-release
      artifacts: true
    - job: build-clang-7-gmxapi-release
      artifacts: true
  only:
    refs:
      - triggers
      - web
      - schedules
    variables:
      - $GROMACS_RELEASE

test-clang-8:
  extends:
    - .test-clang
    - .clang8-template
  needs:
    - job: simple-build
      artifacts: false
    - job: build-clang-8
  except:
    variables:
      - $GROMACS_RELEASE

test-clang-8-release:
  extends:
    - .test-clang
    - .clang8-template
  stage: release-tests
  variables:
    BUILD_DIR: release-builds-clang
  needs:
    - job: configure-clang-8-release
      artifacts: true
    - job: build-clang-8-release
      artifacts: true
  only:
    refs:
      - triggers
      - web
      - schedules
    variables:
      - $GROMACS_RELEASE
